The sieve works by first assuming that all numbers from

{2,…,n}
are prime, and then successively marking them as NOT prime.

The algorithm works as follows:

Create a list of all integers from 2 to n.
Start with the smallest number in the list (2, the smallest prime number).
Mark all multiples of that number up to n as not prime.
Move to the next non-marked number and repeat this process until the entire list has been covered.
When the steps are complete, all remaining non-marked numbers are prime.



Implementation Steps in Python
There are many possible ways of implementing this algorithm in Python. We’ll outline a basic approach here and then walk through it step-by-step.

Create an array of all integers from 2 to n
Set all elements of the array to True
Starting with 2, iterate through the array. If the current element is True, it is still considered prime. Since we know that all multiples of that number are NOT prime, iterate through all multiples of that number up to n and set them equal to False
Change the current element to the next non-False index.
Return the corresponding number value for any element still marked as prime (value of True).


Step One: Create the Array 
First, we’ll create the array. In this case, we’ll create an array to represent all numbers up to the input limit, but we’ll use the array index to represent the number, and its value (True/False) to represent whether it is prime or not. The original algorithm said to use an array of 2, ..., n, but since we’re using indices to represent the actual number, we’ll start the array from 0 and essentially ignore the values of array[0] and array[1].

For example, after running our sieve, an array representing the primes up to 7 would look like this, with elements at [2], [3], [5], and [7] marked True:

[False, False, True, True, False, True, False, True]


Step Two: Iterate
Now we’ll implement the bulk of the algorithm to iterate and mark numbers as non-prime. We’ll do this in two steps:

Create an outer loop to iterate from 2 to the limit.
Inside, check if the current number is still marked prime. If it is, we’ll mark all its multiples using another loop.

Step Three: Return Values
Now it’s time to pare down our array and only return the actual primes. There are many ways to do this, so we’re going to let you figure out an approach to this part of the algorithm isolated from the rest of the code.

Hints
Create an enumerate object of tuples (index, value) using the enumerate() function where index is an incremental number beginning with 0 and value is a boolean value of either True or False.
Convert the enumerate object to a list object with the list() function.
Use list comprehension to create only a list of indices whose corresponding values are True.
Return list of indices.

Optimizations
There are several small optimizations that can be made to the basic implementation of the sieve to remove duplicate checks for prime-ness.

End Boundary
In our basic implementation, the outer loop iterated from 2 to n. Because the inner loop marks multiples of a base value, we only need to check individual numbers lower than the square root of n. Consider the example of a limit of 10:

First, all multiples of 2 are marked:

 
Then, all multiples of 3 are marked:
 
4 is greater than the square root of 10 (approximately 3.16), so we can break. If you look at the previous step, all non-prime numbers have indeed already been marked.

First Multiple
In our basic implementation, the inner loop started checking multiples at 2 times the current number. We can skip a few checks starting the checks at current2.

Consider the example of a limit of 10 again:

First, all multiples of 2 are marked:


 
Then, all multiples of 3 are marked, but we can skip 6 (3 * 2) because it’s already been marked. Instead we start at 32, 9:

We’ve now completed the check with one less comparison.

Pre-mark All Even Numbers
This optimization comes in when building the initial array. There’s no need to ever check even numbers after 2, since they will never be prime, so they can all be marked as non-prime initially.

The complexity of the Sieve of Eratosthenes with optimizations is

�
(
�
log
⁡
(
log
⁡
�
)
)
O(nlog(logn))
There are two operations to take into account: the creation of the array and the incrementing and multiple-marking loops.

Creation happens in O(n) time, since it creates an element for each number from 2 to n.

Multiple marking happens in O(n log (log n)) time. The reasons for this come down to some complex math, but briefly:

The number of times you mark a non-prime number is

​
 
It begins with n / 2 because initially all multiples of 2 are marked as non-prime (this will happen 50 times with a limit of 100, as each even number is marked). This process continues up until the square root of n. Through some fancy mathematical proofs, this works out to an overall time complexity of

O(nlog(logn))
since this is larger than the O(n) array-creation time.