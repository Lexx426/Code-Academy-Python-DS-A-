What would be an ideal situation to use the Manhattan heuristic with A*?
    Whe vertices are distributed across a grid with no diagnol movement
        The Manhattan heuristic calculates the sum of the x and y distances together. For graphs that allow diagonal movement, the Euclidean heuristic is a better choice.

Which heuristic is depicted?
    def heuristic(start, target):
        x_distance = abs(start.position[0] - target.position[0])
        y_distance = abs(start.position[1] - target.position[1])
        return x_distance + y_distance
    
    Manhattan

Quiz: A* Algorithm: Python
Fix the code so that new_path is equal to the correct path to neighbor!
    class graph_vertex:
        def __init__(self, name, x, y):
            self.name = name
            self.position = (x, y)
 
def a_star(graph, start, target):
    paths_and_distances = {}
    for vertex in graph:
        paths_and_distances[vertex] = [inf, [start.name]]
  
    paths_and_distances[start][0] = 0
    vertices_to_explore = [(0, start)]
    while vertices_to_explore and paths_and_distances[target][0] == inf:
        current_dist, current_vtx = heappop(vertices_to_explore)
        for neighbor, edge_weight in graph[current_vtx]:
            new_distance = current_dist + edge_weight + heuristic(neighbor, target)
            # Fix the line below:
            new_path
    
    paths_and_distances[current_vtx][1] + [neighbor.name]
        The path for neighbor within paths_and_distances is only start_vertex so far. new_path should be set to the path up to current_vtx with the neighbor added on.

Given a current vertex, how would the A* algorithm determine the likely cost of following a path in the direction of a neighboring vertex?
    A* would use sum of the distance up to the current vertex, the edge weight to the neighbor, and the heuristic distance calculation from the neighbor to the target

When determining the best path from one city to another, which heuristic would be admissible? (You can assume that at least some of these cities have paths between them that are curved or diagonal.)
    The Euclidean heuristic
        üëè
The Euclidean heuristic would provide a calculation that underestimates or exactly calculates the distance remaining, so it would be admissible.

Quiz: A* Algorithm: Python
Which of the following is NOT a difference between the Dijkstra‚Äôs and A* algorithms?
    Dijkstra‚Äôs algo uses edge weights while A* does not

How is the Euclidean heuristic calculated?
    square root of the sum of the x-distance squared and the y-diatance squared